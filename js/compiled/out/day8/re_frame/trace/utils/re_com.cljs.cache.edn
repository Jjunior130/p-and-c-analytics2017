{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {handler-fn day8.re-frame.trace.utils.re-com}, :excludes #{}, :name day8.re-frame.trace.utils.re-com, :imports nil, :requires {reagent reagent.ratom, reagent.ratom reagent.ratom, string clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses {RAtom reagent.ratom, Reaction reagent.ratom, RCursor reagent.ratom, Track reagent.ratom, Wrapper reagent.ratom}, :defs {deref-or-value {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\p-and-c-analytics2017\\resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :line 7, :column 7, :end-line 7, :end-column 21, :arglists (quote ([val-or-atom])), :doc "Takes a value or an atom\n  If it's a value, returns it\n  If it's a Reagent object that supports IDeref, returns the value inside it by derefing\n  "}, :name day8.re-frame.trace.utils.re-com/deref-or-value, :variadic false, :file "resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :end-column 21, :method-params ([val-or-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val-or-atom])), :doc "Takes a value or an atom\n  If it's a value, returns it\n  If it's a Reagent object that supports IDeref, returns the value inside it by derefing\n  "}, flex-flow-style {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\p-and-c-analytics2017\\resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :line 17, :column 7, :end-line 17, :end-column 22, :arglists (quote ([flex-flow])), :doc "A cross-browser helper function to output flex-flow with all it's potential browser prefixes"}, :name day8.re-frame.trace.utils.re-com/flex-flow-style, :variadic false, :file "resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :end-column 22, :method-params ([flex-flow]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([flex-flow])), :doc "A cross-browser helper function to output flex-flow with all it's potential browser prefixes"}, flex-child-style {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\p-and-c-analytics2017\\resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :line 23, :column 7, :end-line 23, :end-column 23, :arglists (quote ([size])), :doc "Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"}, :name day8.re-frame.trace.utils.re-com/flex-child-style, :variadic false, :file "resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :end-column 23, :method-params ([size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([size])), :doc "Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"}, justify-style {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\p-and-c-analytics2017\\resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :line 70, :column 7, :end-line 70, :end-column 20, :arglists (quote ([justify])), :doc "Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"}, :name day8.re-frame.trace.utils.re-com/justify-style, :variadic false, :file "resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :end-column 20, :method-params ([justify]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([justify])), :doc "Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"}, align-style {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\p-and-c-analytics2017\\resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :line 86, :column 7, :end-line 86, :end-column 18, :arglists (quote ([attribute align])), :doc "Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"}, :name day8.re-frame.trace.utils.re-com/align-style, :variadic false, :file "resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :end-column 18, :method-params ([attribute align]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([attribute align])), :doc "Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"}, gap-f {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\p-and-c-analytics2017\\resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :line 102, :column 7, :end-line 102, :end-column 12, :arglists (quote ([& {:keys [size width height class style attr], :as args}])), :doc "Returns a component which produces a gap between children in a v-box/h-box along the main axis", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height class style attr], :as args})], :arglists ([& {:keys [size width height class style attr], :as args}]), :arglists-meta (nil)}}, :name day8.re-frame.trace.utils.re-com/gap-f, :variadic true, :file "resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height class style attr], :as args})], :arglists ([& {:keys [size width height class style attr], :as args}]), :arglists-meta (nil)}, :method-params [({:keys [size width height class style attr], :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size width height class style attr], :as args}]), :doc "Returns a component which produces a gap between children in a v-box/h-box along the main axis"}, h-box {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\p-and-c-analytics2017\\resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :line 116, :column 7, :end-line 116, :end-column 12, :arglists (quote ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}])), :doc "Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}]), :arglists-meta (nil)}}, :name day8.re-frame.trace.utils.re-com/h-box, :variadic true, :file "resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args})], :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}]), :arglists-meta (nil)}, :method-params [({:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr], :or {size "none", justify :start, align :stretch}, :as args}]), :doc "Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent"}, input-text-base {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\p-and-c-analytics2017\\resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :line 150, :column 8, :end-line 150, :end-column 23, :private true, :arglists (quote ([& {:keys [model input-type], :as args}])), :doc "Returns markup for a basic text input label", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [model input-type], :as args})], :arglists ([& {:keys [model input-type], :as args}]), :arglists-meta (nil)}}, :private true, :name day8.re-frame.trace.utils.re-com/input-text-base, :variadic true, :file "resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [model input-type], :as args})], :arglists ([& {:keys [model input-type], :as args}]), :arglists-meta (nil)}, :method-params [({:keys [model input-type], :as args})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [model input-type], :as args}]), :doc "Returns markup for a basic text input label"}, input-text {:protocol-inline nil, :meta {:file "D:\\Programming\\Projects\\Clojure\\p-and-c-analytics2017\\resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :line 225, :column 7, :end-line 225, :end-column 17, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name day8.re-frame.trace.utils.re-com/input-text, :variadic true, :file "resources\\public\\js\\compiled\\out\\day8\\re_frame\\trace\\utils\\re_com.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}}, :cljs.spec/registry-ref [], :require-macros {day8.re-frame.trace.utils.re-com day8.re-frame.trace.utils.re-com, reagent reagent.ratom, reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{:min-width :children :align-items :align :max-height :min-height :placeholder :disabled :password :justify :value :-webkit-flex-flow :-webkit-flex :-webkit-justify-content :width :start :on-blur :type :flex :max-width :padding-right :size :style :textarea :input-type :rows :on-key-up :div :status :class :padding :change-on-blur? :justify-content :gap :validation-regex :on-submit :input :align-self :on-change :on-key-down :disabled? :stretch :status-icon? :height :status-tooltip :flex-flow :margin :model :attr}, :order [:-webkit-flex-flow :flex-flow :-webkit-flex :flex :-webkit-justify-content :justify-content :size :width :height :class :style :attr :div :align-self :margin :min-width :children :align :stretch :max-height :min-height :justify :start :max-width :padding :gap :align-items :model :input-type :disabled? :on-change :status-icon? :status-tooltip :placeholder :rows :status :change-on-blur? :on-submit :validation-regex :password :input :disabled :value :on-blur :type :on-key-up :on-key-down :padding-right :textarea]}, :doc "Shameless pilfered from re-com."}